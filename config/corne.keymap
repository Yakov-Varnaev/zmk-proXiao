/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <220>;
};

&mt {
    quick_tap_ms = <220>;
};

/ {
    macros {
        numdot: numdot {
            label = "ZM_numdot";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;
        };
        grtsgn: grtsgn {
            label = "ZM_grtsgn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        Base {
            // ------------------------------------------------------------------------------------------------
            //| LGUI/] |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RGUI/[ | 
            //| CTRL/` |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | CTRL/' |
            //| LALT/\ |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT/- |
            //                             | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&none  &kp Q  &kp W  &kp E      &kp R            &kp T        &kp Y        &kp U           &kp I         &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D      &kp F            &kp G        &kp H        &kp J           &kp K         &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C      &kp V            &kp B        &kp N        &kp M           &kp COMMA     &kp DOT  &kp FSLH  &none
                     &lt 0 TAB  &mt LSHFT SPACE  &lt 2 RET    &lt 1 ENTER  &mt RSHFT BSPC  &lt 0 ESCAPE
            >;
        };

        Sym {
            // -----------------------------------------------------------------------------------------
            //|LGUI/CAPS |  *  |  7 |  8  |  9  |  +  |    |  !  |  @  |  #  |  $  |  %  | RGUI/F1 |
            //|CTRL/MENU |  /  |  4 |  5  |  6  |  -  |    |  ^  |  &  |  *  |  (  |  )  | CTRL/F2 |
            //|  LALT/=  |  0  |  1 |  4  |  3  |  .  |    |  ls |  F4 |  F5 |  F6 |  F7 | RALT/F3 |
            //                      | ADJ | ___ | ___ |    | ___ | ___ | ADJ |

            bindings = <
&none  &kp PERCENT    &kp AT_SIGN  &kp HASH       &kp DOLLAR         &kp EXCLAMATION    &kp CARET  &kp QUESTION  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
&none  &kp TILDE      &kp GRAVE    &kp SQT        &kp DOUBLE_QUOTES  &kp UNDERSCORE     &kp CARET  &kp RSHFT     &kp RCTRL     &kp RALT              &kp RGUI               &none
&none  &kp BACKSLASH  &kp PIPE     &kp SEMICOLON  &kp COMMA          &kp MINUS          &kp EQUAL  &kp DOT       &kp COLON     &kp PIPE              &kp FSLH               &none
                                   &none          &trans             &trans             &trans     &trans        &none
            >;
        };

        Nav {
            bindings = <
&none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp ESC      &kp ESC    &kp C_MUTE  &none     &kp BSPC  &kp DEL    &none
&none  &kp LGUI              &kp LALT              &kp LCTRL     &kp LSHFT        &kp ENTER    &kp ENTER  &kp LEFT    &kp DOWN  &kp UP    &kp RIGHT  &none
&none  &to 4                 &to 0                 &none         &none            &kp TAB      &kp TAB    &none       &none     &none     &none      &none
                                                   &trans        &trans           &trans       &trans     &trans      &trans
            >;
        };

        Num {
            bindings = <
&none  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0    &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F11    &kp F12  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10   &none
                           &none      &none      &trans     &trans   &none      &none
            >;
        };

        Russian {
            bindings = <
&none   &kp Q  &kp W  &kp E        &kp R   &kp T     &kp Y   &kp U   &kp I      &kp P    &kp LBKT  &trans
&trans  &kp A  &kp S  &kp D        &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &none
&trans  &kp Z  &kp X  &kp C        &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp APOS  &trans
                      &lt 5 SPACE  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Alt {
            bindings = <
&none  &none  &none  &none  &none  &kp GRAVE    &none  &none              &kp O  &none  &none  &none
&none  &none  &none  &none  &none  &none        &none  &none              &none  &none  &none  &none
&none  &none  &none  &none  &none  &none        &none  &kp RIGHT_BRACKET  &none  &none  &none  &none
                     &none  &none  &none        &none  &none              &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
